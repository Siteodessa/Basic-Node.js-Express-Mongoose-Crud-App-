<% function has_enum(tree,prop){ %>
  <%  if(tree[prop]["enum"]) %>
  <%  return true %>
  <%  return false %>
<%    } %>
<% function humanized_name(prop){ %>
  <%  let translation_base =  {"block":"Район","address":"Адрес", "bldr":"Застройщик", "parking":"Парковка", "elevator":"Лифт", "warming":"Отопление", "floor_height":"Высота потолков", "windows":"Окна", "walls":"Стены", "frontend_material":"Фасад", "construction_type":"Тип конструкции", "appart_on_floor_quant":"Количество квартир на этаже", "sections_quant":"Количество секций", "floors_quant":"Количество этажей", "title":"Заголовок", "home_title":"Заголовок","home_background":"Фото", "home_background":"Фото", "description":"Описание",  "content":"Дополнительное описание", "map_iframe":"Ссылка на карту", "page_link":"Ссылка", "subheading":"Подзаголовок", "prices_start_at":"Цены от (Число)"} %>
  <%  if(translation_base[prop]) return translation_base[prop] %>
  <%  return prop %>
<%    } %>
<% function enumo(schema, prop){ %>
  <%  if(schema.tree[prop]["enum"]) %>
  <%  return schema.tree[prop]["enum"] %>
  <%  return false %>
<%    } %>
<% function isDatePickerField(schema, prop){ %>
  <%  if(schema.tree[prop]["input_type"] == 'datepicker') %>
  <%  return schema.tree[prop]["input_type"] %>
  <%  return false %>
<%    } %>
<% function get_ru_label(schema, prop){ %>
  <%  if(schema.tree[prop]["ru_label"]) %>
  <%  return schema.tree[prop]["ru_label"] %>
  <%  return prop %>
<%    } %>
<% function get_input_type(schema, prop){ %>
  <%  let schemaelem = schema.tree[prop]; if(schemaelem["input_type"]) %>
  <%  return schemaelem["input_type"] %>
  <%  return false %>
<%    } %>
<% function is_supported_note_type(note_types, note_type){ %>
    <% result = null;if (!note_types) { return } ; note_types = note_types + '';note_types.split(',').forEach(elem => { if (elem == note_type) { result = true } }); %>
    <%  return result %>
<%    } %>

<style>
  .minigroup[type="media"] {
    width: 85px;
}
.ministructure {
    display: flex;
    justify-content: center;
    align-items: center;
}.structure {
    display: flex;
    justify-content: center;
    align-items: center;
}
label.radion { background: #fff; padding:  6px 8px; border-radius: 15px; color: #f39c12; cursor: pointer; box-shadow: 0px 0px 0px transparent; transition: .5s; margin: 4px 6px;    border: 1px solid #fff; } .page_added { display:  inline; margin:  0 5px; } iframe#media_upload { width:  100%; border: none; height: 90px; } .db_group { margin:  5px 0 10px; } div#result_form p { padding:  10px  10px 5px; transform: translate(-100%); transition: .5s; opacity: 0; } div#result_form p.shown { transform: translate(0%); opacity: 1; } div#result_form  { overflow: hidden;margin: 0 } label.radion.checked { background: linear-gradient(to bottom, #48c6ef 0%, #6f86d6 100%);  color: #fff; } iframe#media_upload, iframe#multimedia_upload { width:  100%; border: none; height: 90px; } </style>
<button type="button" class="btn btn-warning" data-toggle="modal" data-target="#modal-warning"> Добавить новый </button>
        <div class="modal modal-warning fade" id="modal-warning" style="display: none;">
          <div class="modal-dialog">
            <div class="modal-content">
                        <form class="form-horizontal" id="add_new_form" action="/media_uploader" method="POST" enctype="multipart/form-data">
              <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">×</span></button>
                <h4 class="modal-title">Добавить новый объект</h4>
              </div>
              <div class="modal-body">


  <% function cast_structure(structure_model,input_type, schema, prop, label, structure_model_ru_label){ %>
          <% result = ''  %>
          <% result += `  <div class="db_group" name="${prop}" input_type="${input_type}" >`;  %>

          <% result += `<label></label>`;  %>
          <% if (typeof structure_model == 'string') { return }  %>
          <% result += `  <div class="structure">`;  %>
          <% result += `  <div class="ministructure">`;  %>
          <% result += `  <div class="minigroups">`;  %>
          <% structure_model.forEach(elem => {  %>
            <% result += `<div class="minigroup" type="${elem}">${cast_input(structure_model,elem, schema,input_type, label, structure_model_ru_label )}</div>`;/* create 1 function for all types and call it  PRINTER  */  %>
          <% });%>
          <% result += `</div>`;  %>
          <% result += `</div>`;  %>
          <% result += `<div class="minicontrols"><div class="plus_icon"><i class="fa fa-plus"></i></div></div>`;/* create 1 function for all types and call it  PRINTER  */  %>
          <% result += `</div>`;  %>
          <% result += `</div>`;  %>
          <%  return result;  %>
  <%    } %>

  <% function cast_input(structure_model,input_type, schema, prop, label, structure_model_ru_label) { %>
      <% let result; %>
      <% if (input_type == 'media') { %>
                  <% result = `<div class="db_group" name="${prop}"  input_type="${input_type}" >
                  <iframe scroll="no" name="${prop}" id="media_upload" src="/media_upload"></iframe>
                  <input class="hidden" type="text" name="${prop}" class="${prop}"> </div> ` }%>
      <% if (input_type == 'text') {  if(prop == 'structure') { prop = input_type; label = '';}     %>
                  <% result = `<div class="db_group" name="${prop}"  input_type="${input_type}" >
                  <label>${label}</label>
                  <input class="form-control input-lg" name="${prop}" type="text"> </div>` }%>
      <% if (input_type == 'radio') {      %>
                  <% result = ''; let enums = enumo(schema, prop);  %>
                  <% result += `<div class="db_group" name="${prop}"  input_type="${input_type}" >
                  <label>${label}</label>`; %>
                  <% result += `<div>`;
                  enums.forEach(elem => { result += `<label class="radion">
                  <input class="" name="${prop}" type="radio"  value="${elem}"> ${elem} </label>`; });
                  result += `</div>`; %> <% result += `</div>`; %> <% } %>
      <% if (input_type == 'texteditor') { %>
                  <% result = '';  %>
                  <% result += `<div class="db_group" name="${prop}"  input_type="${input_type}" >
                  <label>${label}</label>`; %>
                  <% result += `<div class="box box-info"> <div class="box-body pad">
                  <form>
                  <textarea id="editor1" name="editor1" rows="10" cols="80"> </textarea>
                  </form> </div> </div>`; %>
                  <% result += `</div>`; %> <% } %>
      <% if (input_type == 'structure') { %>
                  <%  result = cast_structure(structure_model,input_type, schema, prop, label); } %>
      <% if (input_type == 'datepicker') { %>
                  <% result = '';  result += `<div class="db_group" name="${prop}"  input_type="${input_type}" >
                  <label>${label}</label> <div class="input-group date">
                  <div class="input-group-addon"> <i class="fa fa-calendar"></i> </div>
                  <input type="text" class="form-control pull-right" id="datepicker"> </div> </div> `;  } %>
      <% if (input_type == 'multimedia') { %>
                  <% result = '';  result += `<div class="db_group" name="${prop}"  input_type="${input_type}" >
                  <label>${label}</label>
                  <iframe scroll="no"  name="${prop}" id="multimedia_upload" src="/multimedia_upload"></iframe>
                  <input class="hidden" type="text" name="${prop}" class="${prop}">`;} %>
  <% return result;} /* end function cast_input */%>




<% for (let prop in schema.tree) { %>
<% let tree_prop = schema.tree[prop] %>
<% let input_type = tree_prop["input_type"] || '' %>
<% let note_type = tree_prop["note_type"] || '';  %>
<% let visibility = tree_prop["visibility"] || '';  %>
<% let structure_model = tree_prop["structure_model"] || '';  %>
<% let label = tree_prop["ru_label"] || prop;  %>
<% let structure_model_ru_label = tree_prop["structure_model_ru_label"] || prop;  %>
<% if (visibility == 'hidden') { continue; }  %>
<% if (!is_supported_note_type(note_type, 'Объект')) { continue; } %>
<%- cast_input(structure_model,input_type, schema, prop, label, structure_model_ru_label);%>

<% } %>
              </div> <div id="result_form">   <p></p></div>
              <div class="modal-footer">
                  <button type="button" class="btn btn-outline pull-left" data-dismiss="modal">Закрыть</button>
                  <button type="button" class="save btn btn-outline">Сохранить</button>
                  <button type="button" class="save and_close btn btn-outline">Сохранить и закрыть</button>
                  <button type="button" class="update btn btn-outline">Обновить</button>
                  <button type="button" class="update and_close btn btn-outline">Обновить и закрыть</button>
              </div>
            </form>
            </div>
          </div>
        </div>
<script src="\bower_components\bootstrap-datepicker\dist\js\bootstrap-datepicker.min.js"></script>
<script> $('#datepicker').datepicker({ autoclose: true, }) </script>
